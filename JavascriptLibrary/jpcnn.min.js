Dimensions=function(a){if(a instanceof Array)this._dims=_.clone(a);else if(a instanceof Dimensions)this._dims=_.clone(a._dims);else{var b=Array.prototype.slice.call(arguments,0);this._dims=_.clone(b)}_.each(this._dims,function(b){if(isNaN(parseFloat(b))||!isFinite(b))throw"Unknown input type to Dimensions() - "+a;})};window.Dimensions=Dimensions;Dimensions.prototype.elementCount=function(){for(var a=1,b=0;b<this._dims.length;b+=1)a*=this._dims[b];return a};
Dimensions.prototype.offset=function(a){a instanceof Array||(a=Array.prototype.slice.call(arguments,0));var b=_.clone(a).reverse(),d=_.clone(this._dims).reverse(),e=1,f=0;_.each(d,function(a,d){f+=b[d]*e;e*=a});return f};Dimensions.prototype.toString=function(){return"("+this._dims.join(", ")+")"};Dimensions.prototype.removeDimensions=function(a){return new Dimensions(this._dims.slice(a))};
Dimensions.prototype.areEqualTo=function(a){if(this._dims.length!=a._dims.length)return!1;for(var b=0;b<this._dims.length;b+=1)if(this._dims[b]!=a._dims[b])return!1;return!0};
Buffer=function(a,b,d){_.isUndefined(d)&&(d={bitsPerFloat:32,min:0,max:0});var e=d.bitsPerFloat,f=d.min,d=d.max;this._dims=new Dimensions(a);this._bitsPerFloat=e;this._min=f;this._max=d;this._spread=(d-f)/(1<<e);_.isUndefined(b)?(a=this._dims.elementCount(),32===e?this._data=new Float32Array(a):16===e?this._quantizedData=new Uint16Array(a):8===e?this._quantizedData=new Uint8Array(a):console.log("Bad bitsPerFloat "+e)):32===e?this._data=b:16===e?this._quantizedData=new Uint16Array(b):8===e?this._quantizedData=
new Uint8Array(b):console.log("Bad bitsPerFloat "+e);this._name="None"};window.Buffer=Buffer;Buffer.prototype.canReshapeTo=function(){};Buffer.prototype.reshape=function(a){console.assert(a.elementCount()===this._dims.elementCount(),"reshape() must have the same number of elements");this._dims=a;return this};Buffer.prototype.copyDataFrom=function(){};Buffer.prototype.convertFromChannelMajor=function(){};Buffer.prototype.populateWithRandomValues=function(){};
Buffer.prototype.view=function(){var a;a=32===this._bitsPerFloat?new Buffer(this._dims,this._data):new Buffer(this._dims,this._quantizedData,{bitsPerFloat:this._bitsPerFloat,min:this._min,max:this._max});a.setName(this._name+" view");return a};Buffer.prototype.toString=function(){return'Buffer "'+this._name+'" '+this._dims};Buffer.prototype.printContents=function(){};
Buffer.prototype.showDebugImage=function(){var a=this._dims._dims;if(3==a.length){var b=a[1],d=a[0],e=a[2],f=document.createElement("canvas");f.width=b;f.height=d;for(var g=f.getContext("2d"),h=0;h<d;h+=1)for(var i=0;i<b;i+=1){for(var j=[0,0,0,1],k=0;k<e;k+=1){var o=Math.floor(this.valueAt(m,h,i,k));j[k]=o}k="rgba("+j.join(",")+")";g.fillStyle=k;g.fillStyle="rgba("+j.join(",")+")";g.fillRect(i,h,1,1)}b=f.toDataURL("image/png");console.log(b);document.write('<img src="'+b+'"/><br/>');window.open(b,
"_blank")}else if(4==a.length)for(var m=a[0],p=0;p<m;p+=1){b=a[2];d=a[1];e=a[3];f=document.createElement("canvas");f.width=b;f.height=d;g=f.getContext("2d");for(h=0;h<d;h+=1)for(i=0;i<b;i+=1){j=[0,0,0,1];for(k=0;k<e;k+=1)o=Math.floor(this.valueAt(p,h,i,k)),j[k]=o;k="rgba("+j.join(",")+")";g.fillStyle=k;g.fillRect(i,h,1,1)}b=f.toDataURL("image/png");console.log(b);document.write('<img src="'+b+'"/><br/>');window.open(b,"_blank")}else console.log("Unknown image size")};
Buffer.prototype.setName=function(a){this._name=a};
Buffer.prototype.areAllClose=function(a,b){_.isUndefined(b)&&(b=1.0E-6);if(!this)return console.log("Buffer a is empty or undefined"),!1;if(!a)return console.log("Buffer b is empty or undefined"),!1;if(this._dims._dims.length!=a._dims._dims.length)return console.log("Buffers have different numbers of dimensions - "+this+" vs "+a),!1;if(!this._dims.areEqualTo(a._dims))return console.log("Buffers are different sizes - "+this+" vs "+a),!1;if(this._data.length!==this._dims.elementCount())return console.log("The length of a's data buffer doesn't match the required number of elements - a._data.length = "+
this._data.length+", a._dims.elementCount() = "+this._dims.elementCount()),!1;if(a._data.length!==a._dims.elementCount())return console.log("The length of b's data buffer doesn't match the required number of elements - b._data.length = "+a._data.length+", b._dims.elementCount() = "+a._dims.elementCount()),!1;for(var d=0,e=0,f=this._data,g=a._data,h=0,i=this._dims.elementCount();h<i;){var j=f[h];isNaN(j);var k=g[h];isNaN(k)&&(bNaNCount+=1);j=Math.abs(j-k);j>b&&(d+=1);e+=j;h+=1}console.log("Buffers contained "+
100*(d/i)+"% different values ("+d+") mean delta = "+e/i+" "+this+" vs "+a);return 0<d?!1:!0};
Buffer.prototype.extractSubregion=function(a,b,d){var e=this._dims._dims,f=e[1],g=e[2],h=d._dims[1],i=d._dims[2],e=32===this._bitsPerFloat?new Buffer(d):new Buffer(d,void 0,{bitsPerFloat:this._bitsPerFloat,min:this._min,max:this._max});e._name=this._name+" subregion";f*=g;h*=i;32===this._bitsPerFloat?(i=this._data,g=e._data):(i=this._quantizedData,g=e._quantizedData);a=this._dims.offset(a,b,0);b=0;for(d=d.elementCount();b<d;){var j=i.subarray(a,a+h);g.subarray(b,b+h).set(j);a+=f;b+=h}return e};
Buffer.prototype.valueAt=function(){return this._data[this._dims.offset(Array.prototype.slice.call(arguments,0))]};Buffer.prototype.viewAtTopIndex=function(a){var b=this._dims;console.assert(1<b._dims.length);console.assert(a<b._dims[0]);var b=b.removeDimensions(1),d=b.elementCount(),a=this._data.subarray(d*a,d*(a+1));return new Buffer(b,a)};
Buffer.prototype.getGPUBuffer=function(a,b){_.isUndefined(b)&&(b=this._dims);if(_.isUndefined(this._gpuBuffer)){var d;d=32===this._bitsPerFloat?this._data:this._quantizedData;var e=b._dims,f=e[1],g=e[0],e=2<e.length?e[2]:1;console.assert("None"!==this._name);this._gpuBuffer=a.createBuffer({width:f,height:g,channels:e,bitDepth:this._bitsPerFloat,data:d,debugInfo:this.toString()})}return this._gpuBuffer};
function bufferFromTagDict(a){console.assert(a.type===JP_DICT);var b=a.getUintFromDict("float_bits");console.assert(32===b||16===b||8===b);var d=a.getTagFromDict("dims").getSubTags(),e=[];_.each(d,function(a){console.assert(a.type===JP_UINT);e.push(a.value)});var d=new Dimensions(e),f=d.elementCount();if(32===b){var g=a.getTagFromDict("data");console.assert(g.type===JP_FARY);console.assert(g.length===4*f);g=new Buffer(d,g.value)}else if(16===b||8==b)g=a.getTagFromDict("quantized_data"),console.assert(g.type===
JP_BLOB),console.assert(g.length===4*Math.floor((f*(b/8)+3)/4)),f=a.getFloatFromDict("min"),a=a.getFloatFromDict("max"),g=new Buffer(d,g.value,{bitsPerFloat:b,min:f,max:a});return g}
function bufferFromFileAtURL(a){var b=new XMLHttpRequest;b.open("GET",a,!0);b.responseType="arraybuffer";var d=!1;b.onload=function(){d=!0;console.log("loaded")};b.onerror=function(a){alert("Error "+a.target.status+" occurred while receiving the document.");d=!0};for(b.send();!d;);b=tagFromMemory(b.response,0);b=bufferFromTagDict(b);b.setName(a);return b}
function delayedBufferFromFileAtURL(a,b){var d=new XMLHttpRequest;d.open("GET",a,!0);d.responseType="arraybuffer";d.onload=function(){var e=tagFromMemory(d.response,0),e=bufferFromTagDict(e);e.setName(a);b(e)};d.onerror=function(a){alert("Error "+a.target.status+" occurred while receiving the document.")};d.send()}
Network=function(a,b,d){_.isUndefined(d)&&(d={});this._isLoaded=!1;this._isHomebrewed=!0;this._fileTag=null;this._onLoad=b;b=new XMLHttpRequest;b.open("GET",a,!0);b.responseType="arraybuffer";b.onload=function(a){return function(){200==this.status&&a.initializeFromArrayBuffer(this.response)}}(this);b.onerror=function(a){alert("Error "+a.target.status+" occurred while receiving the document.")};d.progress&&(this.onprogress=d.progress,b.onprogress=function(a){return function(b){a.onprogress(100*(b.loaded/
(b.lengthComputable?b.total:64140288)))}}(this));b.send()};window.Network=Network;Network.prototype.classifyImage=function(a,b,d){var e,f,g;this._isHomebrewed?(f=224,e=!1,g=!0):(f=227,e=!0,g=!1);a=this.run((new PrepareInputNode(this._dataMean,!b,e,f,256,g)).run(a),d);b=[];for(d=0;d<a._data.length;d+=1)b.push({value:a._data[d],label:this._labelNames[d]});return b};
Network.prototype.initializeFromArrayBuffer=function(a){this.binaryFormat=new BinaryFormat(a);this._fileTag=a=this.binaryFormat.firstTag();var b=a.getTagFromDict("data_mean");console.assert(null!=b);this._dataMean=bufferFromTagDict(b);var b=a.getTagFromDict("layers").getSubTags(),d=[],e;_.each(b,function(a){var a=nodeFromTag(a),b=a._className,f="relu"===b&&"relu"===e;e=b;f||d.push(a)});this._layers=d;var b=a.getTagFromDict("label_names").getSubTags(),f=[];_.each(b,function(a){f.push(a.value)});this._labelNames=
f;a.getTagFromDict("copyright")&&console.log("Neural network parameters "+a.getStringFromDict("copyright"));this._onLoad(this)};
Network.prototype.run=function(a,b){_.isUndefined(b)&&(b=0);for(var d=a,e=this._layers.length+b,f=0;f<e;f+=1)if(_.isUndefined(this._runOnlyLayer)||f==this._runOnlyLayer){var g=this._layers[f];if(this._testResults){var h="data/c_dog_blobs/"+("000"+(2*f+1)).slice(-3)+"_input.blob",h=bufferFromFileAtURL(h);h.areAllClose(d)?console.log("inputs are equal for "+f):(console.log("inputs differ for "+f+" - "+g.constructor.name),d=h)}if(this._doProfile){console.log("Running "+g.constructor.name);var i=(new Date).getTime()}d=
g.run(d);this._doProfile&&(h=(new Date).getTime()-i,console.log(g._name+" took "+h+" ms"));d.setName(g.constructor.name+" output");this._testResults&&(h="data/c_dog_blobs/"+("000"+(2*f+1)).slice(-3)+"_output.blob",h=bufferFromFileAtURL(h),h.areAllClose(d)?console.log("outputs are equal for "+f):(console.log("outputs differ for "+f+" - "+g.constructor.name),d=h));if(!_.isUndefined(this._runOnlyLayer))return null}return d};BinaryFormat=function(a){this.arrayBuffer=a;this.cursor=0};
window.BinaryFormat=BinaryFormat;JP_CHAR=1380010051;JP_UINT=1414416725;JP_FL32=842222662;JP_FARY=1498562886;JP_DICT=1413695812;JP_LIST=1414744396;JP_BLOB=1112493122;BinaryFormat.prototype.firstTag=function(){return tagFromMemory(this.arrayBuffer,0)};function tagFromMemory(a,b){var d=new Uint32Array(a,b,2),e=d[0],d=d[1],f=a.slice(b+8,b+8+d);return new BinaryTag(e,d,f)}
BinaryTag=function(a,b,d){if(a===JP_CHAR)for(var e=new Uint8Array(d,0,b-1),d="",f=0;f<b-1;){var g=e[f];if(0===g)break;d+=String.fromCharCode(g);f+=1}else if(a===JP_UINT)d=new Uint32Array(d,0,1),d=d[0];else if(a===JP_FL32)d=new Float32Array(d,0,1),d=d[0];else if(a===JP_FARY)d=new Float32Array(d,0,b/4);else if(a!==JP_DICT&&a!==JP_LIST&&a!==JP_BLOB)return console.log("Unknown type "+a),null;this.type=a;this.length=b;this.value=d};window.BinaryTag=BinaryTag;
BinaryTag.prototype.toString=function(){var a=this.type;if(a===JP_CHAR)a="CHAR";else if(a===JP_UINT)a="UINT";else if(a===JP_FL32)a="FL32";else if(a===JP_FARY)a="FARY";else if(a===JP_DICT)a="DICT";else if(a===JP_LIST)a="LIST";else return console.log("Unknown type "+a),null;return"Tag "+a+", length="+this.length+", value = "+this.value};BinaryTag.prototype.sizeInBytes=function(){return 8+this.length};
BinaryTag.prototype.getSubTags=function(){console.assert(this.type===JP_DICT||this.type===JP_LIST);for(var a=this.value,b=this.length,d=0,e=[];d<b;){var f=tagFromMemory(a,d);e.push(f);d+=f.sizeInBytes()}return e};BinaryTag.prototype.getTagFromDict=function(a){var b=null,d=this.getSubTags();console.assert(0==d.length%2);for(var e=0;e<d.length;e+=2){var f=d[e+0];console.assert(f.type===JP_CHAR,"Key must be a string");f.value==a&&(b=d[e+1])}return b};
BinaryTag.prototype.getStringFromDict=function(a){a=this.getTagFromDict(a);console.assert(a&&a.type==JP_CHAR);return a.value};BinaryTag.prototype.getUintFromDict=function(a){a=this.getTagFromDict(a);console.assert(a&&a.type==JP_UINT);return a.value};BinaryTag.prototype.getFloatFromDict=function(a){a=this.getTagFromDict(a);console.assert(a&&a.type==JP_FL32);return a.value};
function nodeFromTag(a){var b={conv:ConvNode,dropout:DropoutNode,flat:FlatNode,gconv:GConvNode,neuron:NeuronNode,normalize:NormalizeNode,pool:PoolNode,relu:ReluNode,max:MaxNode},d=a.getStringFromDict("class"),b=new b[d](a),a=a.getStringFromDict("name");b._className=d;b._name=a;return b}
function ConvNode(a){var b=a.getStringFromDict("class");console.assert("conv"===b,"Wrong class name in tag");b=a.getTagFromDict("spec");this._kernelCount=b.getUintFromDict("num_kernels");this._kernelWidth=b.getUintFromDict("ksize");this._sampleStride=b.getUintFromDict("stride");b=a.getTagFromDict("kernels");this._kernels=bufferFromTagDict(b);if(this._useBias=a.getUintFromDict("has_bias"))b=a.getTagFromDict("bias"),this._bias=bufferFromTagDict(b);this._marginSize=a.getUintFromDict("padding")}
window.ConvNode=ConvNode;ConvNode.prototype.run=function(a){var b=a._dims,b=new Dimensions(b._dims[b._dims.length-1]*this._kernelWidth*this._kernelWidth,this._kernelCount);console.assert(b.areEqualTo(this._kernels._dims));a=0==this._marginSize?a:matrixInsertMargin(a,this._marginSize,this._marginSize);this._output=matrixCorrelate(a,this._kernels,this._kernelWidth,this._kernelCount,this._sampleStride);this._output.setName(this._name);matrixAddInplace(this._output,this._bias,1);return this._output};
function DropoutNode(a){a=a.getStringFromDict("class");console.assert("dropout"===a,"Wrong class name in tag")}window.DropoutNode=DropoutNode;DropoutNode.prototype.run=function(a){return a};function FlatNode(a){a=a.getStringFromDict("class");console.assert("flat"===a,"Wrong class name in tag")}window.FlatNode=FlatNode;FlatNode.prototype.run=function(a){var b=a._dims;console.assert(4==b._dims.length);b=new Dimensions(b._dims[0],b._dims[1]*b._dims[2]*b._dims[3]);return this._output=new Buffer(b,a._data)};
function GConvNode(a){var b=a.getStringFromDict("class");console.assert("gconv"===b,"Wrong class name in tag");this._subnodesCount=a.getUintFromDict("layers_count");var b=a.getTagFromDict("layers").getSubTags(),d=[];_.each(b,function(a){a=nodeFromTag(a);d.push(a)});this._subnodes=d;this._kernelCount=a.getUintFromDict("kernels_count")}window.GConvNode=GConvNode;
GConvNode.prototype.run=function(a){var b=a._dims;console.assert(4===b._dims.length);var d=b._dims[0],e=b._dims[2],f=b._dims[1],b=b._dims[3];console.assert(0===b%this._subnodesCount);b/=this._subnodes.length;new Dimensions(d,f,e,b);d=[];for(e=0;e<this._subnodes.length;e+=1)f=matrixExtractChannels(a,e*b,(e+1)*b),f=this._subnodes[e].run(f),d.push(f);return this._output=matrixJoinChannels(d)};
function NeuronNode(a){var b=a.getStringFromDict("class");console.assert("neuron"===b,"Wrong class name in tag");this._outputsCount=a.getTagFromDict("spec").getUintFromDict("num_output");b=a.getTagFromDict("weight");this._weights=bufferFromTagDict(b);if(this._useBias=a.getUintFromDict("has_bias"))b=a.getTagFromDict("bias"),this._bias=bufferFromTagDict(b);a.getTagFromDict("dropout")&&(this._dropout=a.getFloatFromDict("dropout"))}window.NeuronNode=NeuronNode;
NeuronNode.prototype.run=function(a){var b=a._dims,d=b._dims[0],b=b.removeDimensions(1).elementCount(),d=new Dimensions(d,b),a=a.view();a.reshape(d);b=new Dimensions(b,this._outputsCount);console.assert(b.areEqualTo(this._weights._dims));this._output=matrixDot(a,this._weights);this._output.setName(this._name);matrixAddInplace(this._output,this._bias,1);0<this._dropout&&matrixScaleInplace(this._output,1-this._dropout);return this._output};
function NormalizeNode(a){var b=a.getStringFromDict("class");console.assert("normalize"===b,"Wrong class name in tag");this._windowSize=a.getUintFromDict("size");this._k=a.getFloatFromDict("k");this._alpha=a.getFloatFromDict("alpha");this._beta=a.getFloatFromDict("beta")}window.NormalizeNode=NormalizeNode;NormalizeNode.prototype.run=function(a){return this._output=matrixLocalResponse(a,this._windowSize,this._k,this._alpha,this._beta)};
function PoolNode(a){var b=a.getStringFromDict("class");console.assert("pool"===b,"Wrong class name in tag");this._patchWidth=a.getUintFromDict("psize");this._stride=a.getUintFromDict("stride");this._mode=a.getStringFromDict("mode")}window.PoolNode=PoolNode;PoolNode.prototype.run=function(a){return this._output=matrixMaxPatch(a,this._patchWidth,this._stride)};function ReluNode(a){a=a.getStringFromDict("class");console.assert("relu"===a,"Wrong class name in tag")}window.ReluNode=ReluNode;
ReluNode.prototype.run=function(a){return this._output=matrixMax(a,0)};function MaxNode(a){a=a.getStringFromDict("class");console.assert("max"===a,"Wrong class name in tag")}window.MaxNode=MaxNode;MaxNode.prototype.run=function(a){return this._output=matrixSoftmax(a)};
function PrepareInputNode(a,b,d,e,f,g){this._useCenterOnly=b;this._needsFlip=d;this._imageSize=e;this._rescaledSize=f;b=new Dimensions(this._rescaledSize,this._rescaledSize,3);a.reshape(b);b=new Dimensions(this._imageSize,this._imageSize,3);this._dataMean=new Buffer(b);b=(this._rescaledSize-this._imageSize)/2;d=(this._rescaledSize-this._imageSize)/2;g&&(a=convertFromChanneledRGBImage(a));cropAndFlipImage(this._dataMean,a,b,d,!1);this._dataMean.setName("_dataMean")}window.PrepareInputNode=PrepareInputNode;
PrepareInputNode.prototype.run=function(a){var b=new Dimensions(this._rescaledSize,this._rescaledSize,3);console.assert(a._dims.areEqualTo(b));console.assert(!this._needsFlip);a.setName("input");var b=this._rescaledSize-this._imageSize,d=this._rescaledSize-this._imageSize,e=b/2,f=d/2;if(this._useCenterOnly){var g=new Dimensions(1,this._imageSize,this._imageSize,3);this._output=new Buffer(g);this._output.setName("prepareInput_output");var g=e,h=f,i=this._output.viewAtTopIndex(0);cropAndFlipImage(i,
a,g,h,!1);matrixAddInplace(i,this._dataMean,-1)}else{g=new Dimensions(10,this._imageSize,this._imageSize,3);this._output=new Buffer(g);this._output.setName("prepareInput_output");for(var j=0;2>j;j+=1){var k=1==j,i=this._output.viewAtTopIndex(this._output,5*j);cropAndFlipImage(i,rescaled,e,f,k);for(var o=0;2>o;o+=1)for(var m=0;2>m;m+=1)i=bufferViewAtTopIndex(this._output,5*j+2*o+m+1),g=m*b,h=o*d,cropAndFlipImage(i,a,g,h,k)}}return this._output};
function cropAndFlipImage(a,b,d,e,f){var g=a._dims,h=b._dims;console.assert(3==g._dims.length&&3==h._dims.length);var i=g._dims[1],j=g._dims[0],k=g._dims[2],o=h._dims[1],m=h._dims[0],p=h._dims[2];console.assert(k==p);console.assert(d+i<=o);console.assert(e+j<=m);o=g.removeDimensions(1).elementCount();a=a._data;b=b._data;if(f)for(f=0;f<j;f+=1){l=d;m=f+e;m=h.offset(m,l,0);m=b.subarray(m,m+o);n=g.offset(f,0,0);a.subarray(n,o);for(n=0;n<i;n+=1)l=i-1-n,l=m.subarray(l*p,l*p+k),m.subarray(n*k,n*k+k).set(l)}else for(f=
0;f<j;f+=1){var l=d,m=f+e,m=h.offset(m,l,0),m=b.subarray(m,m+o),n=g.offset(f,0,0);a.subarray(n,n+o).set(m)}}function convertFromChanneledRGBImage(a){var b=a._dims;console.assert(3==b._dims.length);var d=b._dims[1],e=b._dims[0];console.assert(3==b._dims[2]);for(var f=new Buffer(b),a=a._data,g=f._data,h=d*e,b=b.elementCount(),d=0*h,e=1*h,h=2*h,i=0;i<b;)g[i]=a[d],d+=1,i+=1,g[i]=a[e],e+=1,i+=1,g[i]=a[h],h+=1,i+=1;return f}
function matrixAddInplace(a,b,d){console.assert(0==a._dims.elementCount()%b._dims.elementCount());for(var e=a._data,a=a._dims.elementCount(),f=b._data,b=b._dims.elementCount(),g=0,h=0;g<a;)e[g]+=f[h]*d,g+=1,h+=1,h>=b&&(h=0)}
function matrixInsertMargin(a,b,d){var e=a._dims;console.assert(4==e._dims.length);for(var f=e._dims[0],g=e._dims[2],h=e._dims[1],i=e._dims[3],j=g+2*b,e=h+2*d,k=new Dimensions(f,e,j,i),k=new Buffer(k),g=g*i,j=j*i,b=b*i,i=k._data,o=0,a=a._data,m=0,p=0;p<f;p+=1)for(var l=0;l<e;l+=1){var n=l-d;0>n||n>=h?o+=j:(o+=b,n=a.subarray(m,m+g),i.set(n,o),o+=g,m+=g,o+=b)}return k}
function patchesIntoRows(a,b,d){var e=a._dims;console.assert(4==e._dims.length);for(var f=e._dims[0],g=e._dims[2],h=e._dims[1],i=e._dims[3],j=b*b*i,k=Math.round(Math.ceil((g-b)/d)+1),o=Math.round(Math.ceil((h-b)/d)+1),j=new Dimensions(f,o*k,j),j=new Buffer(j),a=a._data,m=j._data,p=0,l=e.removeDimensions(2).elementCount(),n=b*i,q=0;q<f;q+=1)for(var v=0;v<o;v+=1)for(var t=v*d,u=t+b,x=0;x<k;x+=1){var r=x*d,s=r+b,r=e.offset(q,t,r,0);if(u<=h&&s<=g)for(s=0;s<b;s+=1){var w=a.subarray(r,r+n);m.set(w,p);p+=
n;r+=l}else{var y;y=s>g?(s-g)*i:n;var z;z=u>h?b-(u-h):b;for(s=0;s<b;s+=1)s<z?(w=a.subarray(r,r+y),m.set(w,p),p+=n,r+=l):p+=n}}return j}
function matrixCorrelate(a,b,d,e,f){var g=a._dims;console.assert(4==g._dims.length);var h=g._dims[0],i=g._dims[2],j=g._dims[1],g=new Dimensions(d*d*g._dims[3],e);console.assert(g.areEqualTo(b._dims));i=Math.round(Math.ceil((i-d)/f)+1);j=Math.round(Math.ceil((j-d)/f)+1);h=new Dimensions(h,j,i,e);j=new Buffer(h);a=patchesIntoRows(a,d,f);d=a._dims._dims[1]*a._dims._dims[0];f=a._dims._dims[2];j=32===b._bitsPerFloat?matrixGemm(e,d,f,1,b,e,a,f,0,j,e):matrixGemmScaleA(e,d,f,1,b,e,a,f,0,j,e);j.reshape(h);
return j}function matrixGemm(a,b,d,e,f,g,h,i,j,k,o){return glGemm(a,b,d,e,f,g,h,i,j,k,o)}function naiveGemm(a,b,d,e,f,g,h,i,j,k,o){for(var m=new Dimensions(b,a),m=new Buffer(m,k),p=0;p<a;p++)for(var l=0;l<b;l++){for(var n=0,q=0;q<d;q++)n+=f[g*q+p]*h[i*l+q];q=o*l+p;k[q]=e*n+j*k[q]}return m}function matrixGemmScaleA(a,b,d,e,f,g,h,i,j,k,o){return glGemm(a,b,d,e,f,g,h,i,j,k,o,f._spread,f._min,f._bitsPerFloat)}
function naiveGemmScaleA(a,b,d,e,f,g,h,i,j,k,o,m,p){for(var l=new Dimensions(b,a),l=new Buffer(l,k),n=0;n<a;n++)for(var q=0;q<b;q++){for(var v=0,t=0;t<d;t++)v+=(f[g*t+n]*m+p)*h[i*q+t];t=o*q+n;k[t]=e*v+j*k[t]}return l}
function matrixExtractChannels(a,b,d){var e=a._dims,f=e._dims[e._dims.length-1],d=d-b;console.assert(0==f%d);var g=new Dimensions(e);g._dims[g._dims.length-1]=d;for(var g=new Buffer(g),a=a._data,e=e.elementCount(),h=g._data,i=0;b<e;){var j=a.subarray(b,b+d);h.set(j,i);b+=f;i+=d}return g}
function matrixJoinChannels(a){var b=a.length,d=a[0]._dims,e=d._dims[d._dims.length-1],f=e*b,g=new Dimensions(d);g._dims[g._dims.length-1]=f;for(var f=new Buffer(g),h=[],i=0;i<b;i+=1)console.assert(a[i]._dims.areEqualTo(d)),h.push({data:a[i]._data,offset:0});a=f._data;d=0;for(g=g.elementCount();d<g;)for(i=0;i<b;i+=1){var j=h[i],k=j.data.subarray(j.offset,j.offset+e);a.set(k,d);j.offset+=e;d+=e}return f}
function matrixDot(a,b){var d=a._dims;console.assert(2==d._dims.length);var e=d._dims[0],f=d._dims[1],g=b._dims;console.assert(2==d._dims.length);console.assert(g._dims[0]==f);var f=g._dims[1],e=new Dimensions(e,f),g=new Buffer(e),h=d._dims[0],d=d._dims[1],g=32===b._bitsPerFloat?matrixGemm(f,h,d,1,b,f,a,d,0,g,f):matrixGemmScaleA(f,h,d,1,b,f,a,d,0,g,f,b._spread,b._min,b._bitsPerFloat);g.reshape(e);return g}
function matrixScaleInplace(a,b){for(var d=a._data,e=a._dims.elementCount(),f=0;f<e;)d[f]*=b,f+=1}
function matrixLocalResponse(a,b,d,e,f){var g=a._dims;console.assert(4==g._dims.length);for(var h=g._dims[3],i=new Buffer(g),j=(new Buffer(new Dimensions(h)))._data,a=a._data,k=0,o=g.elementCount(),i=i._data,m=0,e=e/b,p=Math.floor(b/2-0);k<o;){for(var l=0;l<h;l+=1){var n=a[k+l];j[l]=n*n*e}for(l=n=0;l<p;l+=1)n+=j[l];for(l=0;l<h;l+=1){var q=l+Math.floor(b/2);q<h&&(n+=j[q]);i[m+l]=n+d;q=l-Math.floor(b/2);0<=q&&(n-=j[q])}k+=h;m+=h}b=new Buffer(g);m=k=0;for(d=b._data;k<o;)n=a[k],g=Math.pow(i[m],-f)*n,
isNaN(g)&&(g=0),d[k]=g,k+=1,m+=1;return b}function matrixMaxPatch(a,b,d){return glMaxPatch(a,b,d)}
function naiveMaxPatch(a,b,d){var e=a._dims;console.assert(4==e._dims.length);for(var f=e._dims[0],g=e._dims[2],h=e._dims[1],i=e._dims[3],j=Math.round(Math.floor((g-b)/d)+1),k=Math.round(Math.floor((h-b)/d)+1),o=new Dimensions(f,k,j,i),m=new Buffer(o),p=m._data,l=0;l<f;l+=1)for(var n=0;n<k;n+=1)for(var q=n*d,v=0;v<j;v+=1)for(var t=v*d,u=0;u<i;u+=1){for(var x=-Number.MAX_VALUE,r=0;r<b;r+=1)for(var s=Math.round(Math.min(h-1,q+r)),w=0;w<b;w+=1)var y=Math.round(Math.min(g-1,t+w)),y=e.offset(l,s,y,u),
x=Math.max(x,a._data[y]);r=o.offset(l,n,v,u);p[r]=x}return m}function matrixMax(a,b){return naiveMax(a,b)}function naiveMax(a,b){for(var d=a._dims,e=new Buffer(d),f=a._data,g=0,d=d.elementCount(),h=e._data;g<d;)h[g]=Math.max(f[g],b),g+=1;return e}
function matrixSoftmax(a){var b=a._dims;console.assert(2==b._dims.length);for(var d=b._dims[0],e=b._dims[1],b=new Buffer(b),a=a._data,f=b._data,g=0;g<d;g+=1){for(var h=g*e,i=-Number.MAX_VALUE,j=h;j<e;)var k=a[j],i=Math.max(i,k),j=j+1;for(var o=0,j=h;j<e;)k=a[j],k=Math.exp(k-i),f[j]=k,o+=k,j+=1;i=1/o;for(j=h;j<e;)f[j]*=i,j+=1}return b}var g_gpuCalculator;function getGPUCalculator(){_.isUndefined(g_gpuCalculator)&&(g_gpuCalculator=new GPUCalculator);return g_gpuCalculator}
var gemmShader=" \nprecision mediump float; \nvarying vec2 outTexCoord; \nuniform sampler2D a; \nuniform vec2 aScale; \nuniform sampler2D b; \nuniform vec2 bScale; \nuniform sampler2D c; \nuniform vec2 cScale; \nuniform float alpha; \nuniform float beta; \nuniform float k; \nuniform float aValueScale; \nuniform float aValueOffset; \nvoid main(void) { \nvec2 texCoord = outTexCoord; \nfloat i = texCoord.x; \nfloat j = texCoord.y; \nvec2 cCoords = vec2(i, j) * cScale; \nfloat cValue; \nif (beta != 0.0) { \ncValue = texture2D(c, cCoords).r; \n} else { \ncValue = 0.0; \n} \nfloat total = 0.0; \nfor (int l = 0; l < 10000; l += 1) { \nif (l >= int(k)) { \nbreak; \n} \nfloat lCoord = (float(l) + 0.5); \nvec2 aCoords = vec2(i, lCoord) * aScale; \nfloat aValue = texture2D(a, aCoords).r; \naValue = ((aValue * aValueScale) + aValueOffset); \nvec2 bCoords = vec2(lCoord, j) * bScale; \nfloat bValue = texture2D(b, bCoords).r; \ntotal += (aValue * bValue); \n} \ngl_FragColor.r = (alpha * total) + (beta * cValue); \n}                                                             \n",gemmShader4x=
" \nprecision mediump float; \nvarying vec2 outTexCoord; \nuniform sampler2D a; \nuniform vec2 aScale; \nuniform sampler2D b; \nuniform vec2 bScale; \nuniform sampler2D c; \nuniform vec2 cScale; \nuniform float alpha; \nuniform float beta; \nuniform float k; \nuniform float aValueScale; \nuniform float aValueOffset; \nvoid main(void) { \nvec2 texCoord = outTexCoord; \nfloat startI = ((texCoord.x - 0.5) * 4.0) + 0.5; \nfloat j = texCoord.y; \nvec2 cCoords = vec2(texCoord.x, texCoord.y) * cScale; \nvec4 cPixel = texture2D(c, cCoords); \nfor (int iInc = 0; iInc < 4; iInc += 1) { \nfloat i = startI + float(iInc); \nfloat iCoord = float(int(i) / 4) + 0.5; \nfloat cValue; \nif (iInc == 0) { \ncValue = cPixel.x; \n} else if (iInc == 1) { \ncValue = cPixel.y; \n} else if (iInc == 2) { \ncValue = cPixel.z; \n} else if (iInc == 3) { \ncValue = cPixel.w; \n} \nfloat total; \nif (beta != 0.0) { \ntotal = (cValue * beta); \n} else { \ntotal = 0.0; \n} \nfor (int l = 0; l < 10000; l += 1) { \nif (l >= int(k)) { \nbreak; \n} \nfloat aLCoord = float(l) + 0.5; \nvec2 aCoords = vec2(iCoord, aLCoord) * aScale; \nvec4 aPixel = texture2D(a, aCoords); \nfloat aValue; \nif (iInc == 0) { \naValue = aPixel.x; \n} else if (iInc == 1) { \naValue = aPixel.y; \n} else if (iInc == 2) { \naValue = aPixel.z; \n} else if (iInc == 3) { \naValue = aPixel.w; \n} \naValue = ((aValue * aValueScale) + aValueOffset); \nfloat bLCoord = float(l / 4) + 0.5; \nint bLComponent = int(mod(float(l), 4.0)); \nvec2 bCoords = vec2(bLCoord, j) * bScale; \nvec4 bPixel = texture2D(b, bCoords); \nfloat bValue; \nif (bLComponent == 0) { \nbValue = bPixel.x; \n} else if (bLComponent == 1) { \nbValue = bPixel.y; \n} else if (bLComponent == 2) { \nbValue = bPixel.z; \n} else if (bLComponent == 3) { \nbValue = bPixel.w; \n} \ntotal += (aValue * bValue); \n} \nfloat result = (alpha * total); \nif (iInc == 0) { \ngl_FragColor.r = result; \n} else if (iInc == 1) { \ngl_FragColor.g = result; \n} else if (iInc == 2) { \ngl_FragColor.b = result; \n} else if (iInc == 3) { \ngl_FragColor.a = result; \n} \n} \n}                                                             \n";
function glGemm(a,b,d,e,f,g,h,i,j,k,o,m,p,l){_.isUndefined(m)&&(m=1);_.isUndefined(p)&&(p=0);_.isUndefined(l)&&(l=32);var i=32===l||16===l?m:m*((1<<l)-1),g=getGPUCalculator(),k=null,o=0==a%4&&0==d%4,n,q;o?(m=gemmShader4x,n=new Dimensions(d,a/4,4),q=new Dimensions(b,d/4,4),l=new Dimensions(b,a/4,4)):(m=gemmShader,n=new Dimensions(d,a,1),q=new Dimensions(b,d,1),l=new Dimensions(b,a,1));n=f.view().reshape(n);q=h.view().reshape(q);for(var v=Math.ceil(d/4096),t=0;t<v;t+=1){var u=d-4096*t;4096<u&&(u=4096);
var x=4096*t,r,s;o?(r=new Dimensions(u,a/4,4),s=new Dimensions(b,u/4,4)):(r=new Dimensions(u,a,1),s=new Dimensions(b,u,1));if(0===t)f.setName("glGemm() inputA"),r=f.getGPUBuffer(g,r),h.setName("glGemm() inputB kStep="+t),s=h.getGPUBuffer(g,s);else{n.setName("glGemm() aFullBuffer");var w=n.extractSubregion(x,0,r);q.setName("glGemm() bFullBuffer");x=o?q.extractSubregion(0,x/4,s):q.extractSubregion(0,x,s);r=w.getGPUBuffer(g,r);s=x.getGPUBuffer(g,s)}0===t?(k=0<j?new Buffer(l,c._data):new Buffer(l,null),
k.setName("glGemm() previousCBuffer"),k=k.getGPUBuffer(g),w=j):w=1;u={alpha:e,beta:w,k:u,aValueScale:i,aValueOffset:p};w={a:r,b:s,c:k};(new Date).getTime();u=g.applyShader({shaderText:m,inputBuffers:w,uniforms:u,width:l._dims[1],height:l._dims[0]});0!==t&&g.deleteBuffer(r);g.deleteBuffer(s);k&&g.deleteBuffer(k);k=u}d=g.getResult(k,l._dims[2]);(new Date).getTime();g.deleteBuffer(k);a=new Dimensions(b,a);return new Buffer(a,d)}var maxPatchShader=" \nprecision mediump float; \nvarying vec2 outTexCoord; \nuniform sampler2D a; \nuniform vec2 aScale; \nuniform float patchWidth; \nuniform float stride; \nuniform float channelCount; \nvoid main(void) { \nvec2 texCoord = outTexCoord; \nfloat outputXAndChannels = floor(texCoord.x); \nfloat outputChannel = mod(outputXAndChannels, channelCount); \nfloat outputX = floor(outputXAndChannels / channelCount); \nfloat outputY = floor(texCoord.y); \nfloat inputOriginX = (outputX * stride); \nfloat inputOriginY = (outputY * stride); \nvec4 patchMax = vec4(-100000000.0, -100000000.0, -100000000.0, -100000000.0); \nfor (int patchY = 0; patchY < 100; patchY += 1) { \nif (patchY >= int(patchWidth)) { \nbreak; \n} \nfloat inputY = ((inputOriginY + float(patchY)) + 0.5); \nfor (int patchX = 0; patchX < 100; patchX += 1) { \nif (patchX >= int(patchWidth)) { \nbreak; \n} \nfloat inputX = ((inputOriginX + float(patchX))); \nfloat inputXAndChannel = (inputX * channelCount) + outputChannel; \nvec2 inputCoords = vec2(inputXAndChannel + 0.5, inputY) * aScale; \nvec4 inputPixel = texture2D(a, inputCoords); \npatchMax = max(patchMax, inputPixel); \n} \n} \ngl_FragColor = patchMax; \n}                                                             \n";
function glMaxPatch(a,b,d){var e=getGPUCalculator(),f=a._dims._dims,g=f[0];console.assert(1===g,"Only handles the single-image case");var h=f[2],i=f[1],j=f[3],f=Math.floor(j/4);console.assert(4*f===j,"Channel count must be a multiple of four");var k=new Dimensions(i,h*f,4),h=Math.round(Math.floor((h-b)/d)+1),i=Math.round(Math.floor((i-b)/d)+1),g=new Dimensions(g,i,h,j),h=h*f,j=new Dimensions(i,h,4),a=a.getGPUBuffer(e,k),b=e.applyShader({shaderText:maxPatchShader,inputBuffers:{a:a},uniforms:{patchWidth:b,
stride:d,channelCount:f},width:h,height:i}),d=e.getResult(b,4);e.deleteBuffer(a);e.deleteBuffer(b);e=new Buffer(j,d);e.reshape(g);return e}var maxShader=" \nprecision mediump float; \nvarying vec2 outTexCoord; \nuniform sampler2D a; \nuniform vec2 aScale; \nuniform float maxValue; \nvoid main(void) { \nvec2 texCoord = outTexCoord; \nvec2 inputCoords = (texCoord * aScale); \nvec4 inputPixel = texture2D(a, inputCoords); \ngl_FragColor = max(inputPixel, vec4(maxValue, maxValue, maxValue, maxValue)); \n}                                                             \n";
function glMax(a,b){var d=getGPUCalculator(),e=a._dims._dims;console.assert(1===e[0],"Only handles the single-image case");var f=e[1],g;g=3>e.length?1:e[2];e=(4>e.length?1:e[3])/4;1===g&&(g=f,f=1);var h=g*e;g=new Dimensions(f,h,4);e=a.getGPUBuffer(d,g);f=d.applyShader({shaderText:maxShader,inputBuffers:{a:e},uniforms:{maxValue:b},width:h,height:f});h=d.getResult(f,4);d.deleteBuffer(e);d.deleteBuffer(f);d=new Buffer(g,h);d.reshape(a._dims);return d}
ArrayBuffer.prototype.slice||(ArrayBuffer.prototype.slice=function(a,b){void 0===a&&(a=0);void 0===b&&(b=this.byteLength);a=Math.floor(a);b=Math.floor(b);0>a&&(a+=this.byteLength);0>b&&(b+=this.byteLength);a=Math.min(Math.max(0,a),this.byteLength);b=Math.min(Math.max(0,b),this.byteLength);if(0>=b-a)return new ArrayBuffer(0);var d=new ArrayBuffer(b-a),e=new Uint8Array(d),f=new Uint8Array(this,a,b-a);e.set(f);return d});
